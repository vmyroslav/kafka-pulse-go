version: '3'

includes:
  internal:
    taskfile: ./Taskfile.internal.yml
    internal: true
  ci:
    taskfile: ./Taskfile.ci.yml
    internal: false

tasks:
  default:
    desc: Show all available tasks
    cmds:
      - task --list-all
  lint:
    desc: Run linter checks
    cmds:
      - golangci-lint run -c .golangci.yml
  test:
    desc: Run all tests with coverage
    deps:
      - test:core
      - test:confluentic
      - test:sarama
      - test:segmentio

  test:core:
    desc: Run core library tests
    cmds:
      - go test -timeout=60s -race -covermode=atomic -coverprofile=profile.cov ./...

  test:confluentic:
    desc: Run confluentic adapter tests (unit + integration)
    deps:
      - test:confluentic:unit
      - test:confluentic:integration

  test:sarama:
    desc: Run sarama adapter tests (unit + integration)
    deps:
      - test:sarama:unit
      - test:sarama:integration

  test:segmentio:
    desc: Run segmentio adapter tests (unit + integration)
    deps:
      - test:segmentio:unit
      - test:segmentio:integration

  test:unit:
    desc: Run only unit tests
    deps:
      - test:core
      - test:confluentic:unit
      - test:sarama:unit
      - test:segmentio:unit

  test:integration:
    desc: Run only integration tests
    deps:
      - test:confluentic:integration
      - test:sarama:integration
      - test:segmentio:integration

  test:confluentic:unit:
    desc: Run confluentic unit tests (mock cluster)
    dir: adapter/confluentic
    cmds:
      - go test -timeout=60s -race -covermode=atomic -coverprofile=profile.unit.cov adapter_test.go adapter.go

  test:confluentic:integration:
    desc: Run confluentic integration tests (real containers)
    dir: adapter/confluentic
    cmds:
      - go test -timeout=300s -race -covermode=atomic -coverprofile=profile.integration.cov adapter_integration_test.go adapter.go

  test:sarama:unit:
    desc: Run sarama unit tests (no containers)
    dir: adapter/sarama
    cmds:
      - go test -timeout=60s -race -covermode=atomic -coverprofile=profile.unit.cov adapter_test.go adapter.go

  test:sarama:integration:
    desc: Run sarama integration tests (real containers)
    dir: adapter/sarama
    cmds:
      - go test -timeout=300s -race -covermode=atomic -coverprofile=profile.integration.cov adapter_integration_test.go adapter.go

  test:segmentio:unit:
    desc: Run segmentio unit tests (no containers)
    dir: adapter/segmentio
    cmds:
      - go test -timeout=60s -race -covermode=atomic -coverprofile=profile.unit.cov adapter_test.go adapter.go

  test:segmentio:integration:
    desc: Run segmentio integration tests (real containers)
    dir: adapter/segmentio
    cmds:
      - go test -timeout=300s -race -covermode=atomic -coverprofile=profile.integration.cov adapter_integration_test.go adapter.go

  test:coverage:
    desc: Generate combined coverage report from all tests
    deps:
      - test
    cmds:
      - task: test:coverage:merge
      - task: test:coverage:report

  test:coverage:merge:
    desc: Merge all coverage files into a single report
    internal: true
    cmds:
      - |
        # Create directory for combined coverage
        mkdir -p coverage
        
        # Merge all coverage files using go tool cover
        echo "mode: atomic" > coverage/combined.cov
        
        # Add core coverage
        if [ -f "profile.cov" ]; then
          tail -n +2 profile.cov >> coverage/combined.cov
        fi
        
        # Add adapter coverage files
        for adapter in confluentic sarama segmentio; do
          # Unit coverage
          if [ -f "adapter/$adapter/profile.unit.cov" ]; then
            tail -n +2 "adapter/$adapter/profile.unit.cov" >> coverage/combined.cov
          fi
          # Integration coverage  
          if [ -f "adapter/$adapter/profile.integration.cov" ]; then
            tail -n +2 "adapter/$adapter/profile.integration.cov" >> coverage/combined.cov
          fi
        done

  test:coverage:report:
    desc: Generate HTML coverage report
    internal: true
    cmds:
      - go tool cover -html=coverage/combined.cov -o coverage/coverage.html
      - go tool cover -func=coverage/combined.cov
      - echo "üìä Combined coverage report generated at coverage/coverage.html"

  test:coverage:clean:
    desc: Clean coverage files
    cmds:
      - rm -rf coverage/
      - rm -f profile.cov
      - rm -f adapter/*/profile.*.cov

  fmt:
    desc: Format project files
    cmds:
      - find . -name '*.go' -type f -exec gofumpt -w {} +
      - golangci-lint run --fix
  clean:
    desc: Clean up and format code
    cmds:
      - defer: {task: fmt}
      - go mod tidy
  update-deps:
    desc: Update Go dependencies
    cmds:
      - go get -u ./...

# #################################################
# CI/CD Tasks
# #################################################
  ci:prepare-release:
    desc: Prepares release
    summary: |
      Usage: task prepare-release VERSION=1.1.0
      1. Runs linters and tests.
      2. Extracts release notes from CHANGELOG.md.
      3. Updates CHANGELOG.md with the new version tag.
    vars:
      VERSION: '{{.VERSION}}'
    preconditions:
      - sh: 'test -n "{{.VERSION}}"'
        msg: "VERSION variable is required. Usage: task ci:prepare-release VERSION=1.2.3"
      - sh: 'echo "{{.VERSION}}" | grep -qE "^[0-9]+\.[0-9]+\.[0-9]+$"'
        msg: "Version format must be 'X.Y.Z'. Passed: {{.VERSION}}"
      - sh: "test -n \"$(awk '/^## \\[Unreleased\\]/{flag=1; next} /^## \\[/{flag=0} flag' CHANGELOG.md)\""
        msg: "‚ùå The [Unreleased] section in CHANGELOG.md is empty. Nothing to release."
    cmds:
      - task: ci:check-version-bump
        vars: { VERSION: "{{.VERSION}}" }
      - task: ci:changelog:extract
      - task: ci:changelog:update
        vars: { VERSION: "v{{.VERSION}}" }