version: '3'

silent: true

includes:
  internal:
    taskfile: ./Taskfile.internal.yml
    internal: true

tasks:
  default:
    desc: Show all available tasks
    cmds:
      - task --list-all
  lint:
    desc: Run linter checks
    cmds:
      - golangci-lint run -c .golangci.yml
  test:
    desc: Run all tests with coverage
    silent: true
    vars:
      COVERAGE: "true"
    deps:
      - for: { var: COMPONENTS, as: COMPONENT_NAME }
        task: 'internal:test:{{.COMPONENT_NAME}}'
        vars: { COVERAGE: "{{.COVERAGE}}" }
        silent: true
    cmds:
      - task: internal:test:coverage:merge
  test:unit:
    desc: Run only unit tests (no coverage)
    deps:
      - task: internal:test:core
      - for: { var: ADAPTERS, as: ADAPTER_NAME }
        task: 'internal:test:{{.ADAPTER_NAME}}:unit'
        silent: true
  fmt:
    desc: Format project files
    cmds:
      - golangci-lint fmt
      - golangci-lint run --fix --config .golangci.yml
  clean:
    desc: Clean up and format code in core and all adapters
    deps:
      - task: internal:clean:core
      - for: { var: ADAPTERS, as: ADAPTER_NAME }
        task: 'internal:clean:{{.ADAPTER_NAME}}'
    cmds:
      - task: fmt
  update-deps:
    desc: Update Go dependencies in core and all adapters
    deps:
      - task: internal:update-deps:core
      - for: { var: ADAPTERS, as: ADAPTER_NAME }
        task: 'internal:update-deps:{{.ADAPTER_NAME}}'

  changelog:extract:
    desc: Extract release notes from changelog unreleased section
    summary: |
      Usage: task changelog:extract COMPONENT=core
      Extracts the unreleased section from changelog for release notes.
      COMPONENT can be: core, sarama, confluentic, segmentio
    vars:
      COMPONENT: '{{.COMPONENT | default "core"}}'
      CHANGELOG_PATH: '{{if eq .COMPONENT "core"}}./CHANGELOG.md{{else}}./adapter/{{.COMPONENT}}/CHANGELOG.md{{end}}'
      OUTPUT_FILE: '{{.OUTPUT_FILE | default "release_notes.md"}}'
    cmds:
      - |
        echo "ðŸ“‹ Extracting unreleased notes for {{.COMPONENT}} from {{.CHANGELOG_PATH}}"
        # Extract unreleased content and filter empty sections
        TEMP_FILE=$(mktemp)
        sed -n '/^## \[Unreleased\]$/,/^## /p' "{{.CHANGELOG_PATH}}" | sed '$d' | sed '1d' > "$TEMP_FILE"
        
        # Filter out empty sections
        > "{{.OUTPUT_FILE}}"
        current_section=""
        section_has_content=false
        
        while IFS= read -r line; do
          if [[ "$line" =~ ^###\  ]]; then
            if [[ -n "$current_section" && "$section_has_content" == true ]]; then
              [[ -s "{{.OUTPUT_FILE}}" ]] && echo "" >> "{{.OUTPUT_FILE}}"
              echo "$current_section" >> "{{.OUTPUT_FILE}}"
              echo "$section_content" >> "{{.OUTPUT_FILE}}"
            fi
            current_section="$line"
            section_content=""
            section_has_content=false
          elif [[ -n "$line" && "$line" != "" ]]; then
            if [[ -n "$current_section" ]]; then
              section_content="${section_content}${section_content:+$'\n'}$line"
              section_has_content=true
            fi
          fi
        done < "$TEMP_FILE"
        
        if [[ -n "$current_section" && "$section_has_content" == true ]]; then
          [[ -s "{{.OUTPUT_FILE}}" ]] && echo "" >> "{{.OUTPUT_FILE}}"
          echo "$current_section" >> "{{.OUTPUT_FILE}}"
          echo "$section_content" >> "{{.OUTPUT_FILE}}"
        fi
        
        rm -f "$TEMP_FILE"
        echo "âœ… Release notes saved to: {{.OUTPUT_FILE}}"
        echo "ðŸ“‹ Content:"
        cat "{{.OUTPUT_FILE}}"