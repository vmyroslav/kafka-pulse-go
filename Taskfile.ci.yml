version: '3'

vars:
  # Component lists
  COMPONENTS: "core sarama confluentic segmentio"

tasks:
  # #################################################
  # Shared Utility Tasks
  # #################################################
  
  extract-changelog:
    desc: Extract unreleased section from changelog
    internal: true
    silent: true
    vars:
      COMPONENT: '{{.COMPONENT}}'
      RELEASE_NOTES_FILE: '{{.RELEASE_NOTES_FILE | default (printf "release-notes-%s.md" .COMPONENT)}}'
    preconditions:
      - sh: 'test -n "{{.COMPONENT}}"'
        msg: "COMPONENT is required"
    cmds:
      - |
        # Determine changelog path based on component
        case "{{.COMPONENT}}" in
          core) CHANGELOG_PATH="CHANGELOG.md" ;;
          sarama) CHANGELOG_PATH="adapter/sarama/CHANGELOG.md" ;;
          confluentic) CHANGELOG_PATH="adapter/confluentic/CHANGELOG.md" ;;
          segmentio) CHANGELOG_PATH="adapter/segmentio/CHANGELOG.md" ;;
          *) echo "Unknown component: {{.COMPONENT}}"; exit 1 ;;
        esac
        
        awk '/^## \[Unreleased\]/{flag=1; next} /^## \[/{flag=0} flag' $CHANGELOG_PATH > {{.RELEASE_NOTES_FILE}}
        if [ ! -s {{.RELEASE_NOTES_FILE}} ]; then
          echo "Error: No changes found under '## [Unreleased]' in $CHANGELOG_PATH"
          exit 1
        fi
        echo "   -> Release notes saved to {{.RELEASE_NOTES_FILE}}"

  update-changelog:
    desc: Update changelog with new version
    internal: true
    silent: true
    vars:
      COMPONENT: '{{.COMPONENT}}'
      VERSION: '{{.VERSION}}'
    preconditions:
      - sh: 'test -n "{{.COMPONENT}}" && test -n "{{.VERSION}}"'
        msg: "COMPONENT and VERSION are required"
    cmds:
      - |
        # Determine changelog path based on component
        case "{{.COMPONENT}}" in
          core) CHANGELOG_PATH="CHANGELOG.md" ;;
          sarama) CHANGELOG_PATH="adapter/sarama/CHANGELOG.md" ;;
          confluentic) CHANGELOG_PATH="adapter/confluentic/CHANGELOG.md" ;;
          segmentio) CHANGELOG_PATH="adapter/segmentio/CHANGELOG.md" ;;
          *) echo "Unknown component: {{.COMPONENT}}"; exit 1 ;;
        esac
        
        RELEASE_DATE=$(date +'%Y-%m-%d')
        INSERT_TEXT="## [Unreleased]\n\n## [{{.VERSION}}] - $RELEASE_DATE"
        sed -i "s@^## \[Unreleased\]@$INSERT_TEXT@" $CHANGELOG_PATH
        echo "   -> {{.COMPONENT}} CHANGELOG.md updated"

  check-version-bump:
    desc: Validate semantic version bump
    internal: true
    silent: true
    vars:
      COMPONENT: '{{.COMPONENT}}'
      VERSION: '{{.VERSION}}'
    preconditions:
      - sh: 'test -n "{{.COMPONENT}}" && test -n "{{.VERSION}}"'
        msg: "COMPONENT and VERSION are required"
    cmds:
      - |
        # Determine tag patterns based on component
        case "{{.COMPONENT}}" in
          core) 
            TAG_PATTERN="v*"
            TAG_PREFIX="v"
            LATEST_TAG=$(git tag -l "$TAG_PATTERN" | grep -v "/" | sort -V | tail -1 || echo "")
            ;;
          sarama|confluentic|segmentio)
            TAG_PATTERN="{{.COMPONENT}}/v*"
            TAG_PREFIX="{{.COMPONENT}}/v"
            LATEST_TAG=$(git tag -l "$TAG_PATTERN" | sort -V | tail -1 || echo "")
            ;;
          *) echo "Unknown component: {{.COMPONENT}}"; exit 1 ;;
        esac
        
        NEW_TAG="${TAG_PREFIX}{{.VERSION}}"
        
        if [ -z "$LATEST_TAG" ]; then 
          echo "   -> No previous {{.COMPONENT}} git tag found. Skipping check."
          exit 0
        fi
        
        # Extract version numbers
        OLD_VER=${LATEST_TAG#$TAG_PREFIX}
        NEW_VER={{.VERSION}}
        
        IFS='.' read -r old_major old_minor old_patch <<< "$OLD_VER"
        IFS='.' read -r new_major new_minor new_patch <<< "$NEW_VER"
        
        # Check for valid semantic version bump
        if ( [ "$new_major" -eq "$((old_major + 1))" ] && [ "$new_minor" -eq 0 ] && [ "$new_patch" -eq 0 ] ) || \
           ( [ "$new_major" -eq "$old_major" ] && [ "$new_minor" -eq "$((old_minor + 1))" ] && [ "$new_patch" -eq 0 ] ) || \
           ( [ "$new_major" -eq "$old_major" ] && [ "$new_minor" -eq "$old_minor" ] && [ "$new_patch" -eq "$((old_patch + 1))" ] ); then
          echo "   -> ✅ {{.COMPONENT}} version $NEW_TAG is a valid bump from $LATEST_TAG"
          exit 0
        fi
        
        echo "❌ {{.COMPONENT}} version '$NEW_TAG' is not a valid semantic bump from '$LATEST_TAG'"
        exit 1

  # #################################################
  # Change Detection
  # #################################################
  
  detect-changes:
    desc: Detect which components have changes since last release
    internal: true
    cmds:
      - |
        echo "🔍 Detecting changes in components..."
        CHANGED_COMPONENTS=""
        
        # Check each component for changes
        for component in core sarama confluentic segmentio; do
          case $component in
            core)
              TAG_PATTERN="v*"
              LATEST_TAG=$(git tag -l "$TAG_PATTERN" | grep -v "/" | sort -V | tail -1 || echo "")
              if [ -n "$LATEST_TAG" ]; then
                CHANGES=$(git diff --name-only $LATEST_TAG..HEAD | grep -v "^adapter/" | grep -v "^examples/" || true)
              else
                CHANGES=$(git ls-files | grep -v "^adapter/" | grep -v "^examples/" || true)
              fi
              ;;
            sarama|confluentic|segmentio)
              TAG_PATTERN="$component/v*"
              LATEST_TAG=$(git tag -l "$TAG_PATTERN" | sort -V | tail -1 || echo "")
              if [ -n "$LATEST_TAG" ]; then
                CHANGES=$(git diff --name-only $LATEST_TAG..HEAD -- adapter/$component/ || true)
              else
                CHANGES=$(git ls-files -- adapter/$component/ || true)
              fi
              ;;
          esac
          
          if [ -n "$CHANGES" ]; then
            CHANGED_COMPONENTS="$CHANGED_COMPONENTS $component"
            echo "  ✅ $component has changes"
          fi
        done
        
        if [ -z "$CHANGED_COMPONENTS" ]; then
          echo "  ℹ️  No components have changes"
        else
          echo "📋 Changed components:$CHANGED_COMPONENTS"
        fi
        
        echo "$CHANGED_COMPONENTS" > .changed-components

  # #################################################
  # Main Release Tasks
  # #################################################
  
  prepare-release:
    desc: Prepare release for a specific component
    summary: |
      Usage: task -t Taskfile.ci.yml prepare-release COMPONENT=core VERSION=2.1.0
      
      Available components: core, sarama, confluentic, segmentio
    vars:
      COMPONENT: '{{.COMPONENT}}'
      VERSION: '{{.VERSION}}'
    preconditions:
      - sh: 'test -n "{{.COMPONENT}}"'
        msg: "COMPONENT is required. Usage: task prepare-release COMPONENT=core VERSION=2.1.0"
      - sh: 'test -n "{{.VERSION}}"'
        msg: "VERSION is required. Usage: task prepare-release COMPONENT={{.COMPONENT}} VERSION=1.2.3"
      - sh: 'echo "{{.VERSION}}" | grep -qE "^[0-9]+\.[0-9]+\.[0-9]+$"'
        msg: "Version format must be 'X.Y.Z'. Passed: {{.VERSION}}"
      - sh: |
          case "{{.COMPONENT}}" in
            core) CHANGELOG_PATH="CHANGELOG.md" ;;
            sarama) CHANGELOG_PATH="adapter/sarama/CHANGELOG.md" ;;
            confluentic) CHANGELOG_PATH="adapter/confluentic/CHANGELOG.md" ;;
            segmentio) CHANGELOG_PATH="adapter/segmentio/CHANGELOG.md" ;;
            *) echo "Unknown component: {{.COMPONENT}}"; exit 1 ;;
          esac
          test -n "$(awk '/^## \[Unreleased\]/{flag=1; next} /^## \[/{flag=0} flag' $CHANGELOG_PATH)"
        msg: "❌ The [Unreleased] section in {{.COMPONENT}} CHANGELOG.md is empty. Nothing to release."
    cmds:
      - task: check-version-bump
        vars: { COMPONENT: "{{.COMPONENT}}", VERSION: "{{.VERSION}}" }
      - task: extract-changelog
        vars: { COMPONENT: "{{.COMPONENT}}" }
      - |
        # Update changelog with proper tag prefix
        case "{{.COMPONENT}}" in
          core) TAG_PREFIX="v" ;;
          sarama|confluentic|segmentio) TAG_PREFIX="{{.COMPONENT}}/v" ;;
          *) echo "Unknown component: {{.COMPONENT}}"; exit 1 ;;
        esac
        
        # Determine changelog path
        case "{{.COMPONENT}}" in
          core) CHANGELOG_PATH="CHANGELOG.md" ;;
          sarama) CHANGELOG_PATH="adapter/sarama/CHANGELOG.md" ;;
          confluentic) CHANGELOG_PATH="adapter/confluentic/CHANGELOG.md" ;;
          segmentio) CHANGELOG_PATH="adapter/segmentio/CHANGELOG.md" ;;
          *) echo "Unknown component: {{.COMPONENT}}"; exit 1 ;;
        esac
        
        # Update changelog
        RELEASE_DATE=$(date +'%Y-%m-%d')
        VERSION_TAG="${TAG_PREFIX}{{.VERSION}}"
        INSERT_TEXT="## [Unreleased]\n\n## [$VERSION_TAG] - $RELEASE_DATE"
        sed -i "s@^## \[Unreleased\]@$INSERT_TEXT@" $CHANGELOG_PATH
        echo "   -> {{.COMPONENT}} CHANGELOG.md updated"

  # #################################################
  # Public Interface Tasks
  # #################################################
  
  ci:prepare-release:core:
    desc: Prepare core library release
    summary: "Usage: task ci:prepare-release:core VERSION=2.1.0"
    cmds:
      - task: prepare-release
        vars: { COMPONENT: "core", VERSION: "{{.VERSION}}" }

  ci:prepare-release:sarama:
    desc: Prepare sarama adapter release
    summary: "Usage: task ci:prepare-release:sarama VERSION=1.1.0"
    cmds:
      - task: prepare-release
        vars: { COMPONENT: "sarama", VERSION: "{{.VERSION}}" }

  ci:prepare-release:confluentic:
    desc: Prepare confluentic adapter release
    summary: "Usage: task ci:prepare-release:confluentic VERSION=1.0.0"
    cmds:
      - task: prepare-release
        vars: { COMPONENT: "confluentic", VERSION: "{{.VERSION}}" }

  ci:prepare-release:segmentio:
    desc: Prepare segmentio adapter release
    summary: "Usage: task ci:prepare-release:segmentio VERSION=1.0.0"
    cmds:
      - task: prepare-release
        vars: { COMPONENT: "segmentio", VERSION: "{{.VERSION}}" }

  ci:prepare-release:auto:
    desc: Auto-detect changes and prepare releases interactively
    summary: "Usage: task ci:prepare-release:auto"
    cmds:
      - task: detect-changes
      - |
        echo "🚀 Preparing releases for changed components..."
        CHANGED_COMPONENTS=$(cat .changed-components)
        
        if [ -z "$CHANGED_COMPONENTS" ]; then
          echo "ℹ️  No components have changes. Nothing to release."
          exit 0
        fi
        
        for component in $CHANGED_COMPONENTS; do
          echo ""
          echo "📦 Component: $component"
          read -p "Enter version for $component (X.Y.Z format): " version
        
          if [ -z "$version" ]; then
            echo "⏭️  Skipping $component (no version provided)"
            continue
          fi
        
          echo "🔄 Preparing $component release v$version..."
          task -t Taskfile.ci.yml prepare-release COMPONENT=$component VERSION=$version
        done
        
        echo ""
        echo "✅ All component releases prepared!"
        echo "💡 Next steps:"
        echo "   1. Review the changes in changelogs"
        echo "   2. Run: git add . && git commit -m 'chore: prepare releases'"
        echo "   3. Create tags and push to trigger releases"

  ci:prepare-release:all:
    desc: Prepare releases for all components with specified versions
    summary: |
      Usage: task ci:prepare-release:all CORE_VERSION=2.1.0 SARAMA_VERSION=1.1.0 CONFLUENTIC_VERSION=1.1.0 SEGMENTIO_VERSION=1.1.0
      Skip a component by not providing its version variable.
    vars:
      CORE_VERSION: '{{.CORE_VERSION}}'
      SARAMA_VERSION: '{{.SARAMA_VERSION}}'
      CONFLUENTIC_VERSION: '{{.CONFLUENTIC_VERSION}}'
      SEGMENTIO_VERSION: '{{.SEGMENTIO_VERSION}}'
    cmds:
      - |
        echo "🚀 Preparing releases for all specified components..."
        
        # Process each component if version provided
        for component_var in CORE_VERSION:core SARAMA_VERSION:sarama CONFLUENTIC_VERSION:confluentic SEGMENTIO_VERSION:segmentio; do
          var_name=${component_var%:*}
          component=${component_var#*:}
          
          case $var_name in
            CORE_VERSION) version="{{.CORE_VERSION}}" ;;
            SARAMA_VERSION) version="{{.SARAMA_VERSION}}" ;;
            CONFLUENTIC_VERSION) version="{{.CONFLUENTIC_VERSION}}" ;;
            SEGMENTIO_VERSION) version="{{.SEGMENTIO_VERSION}}" ;;
          esac
          
          if [ -n "$version" ]; then
            echo "📦 Preparing $component release v$version"
            task -t Taskfile.ci.yml prepare-release COMPONENT=$component VERSION=$version
          fi
        done
        
        echo ""
        echo "✅ All specified component releases prepared!"
        echo "💡 Next steps:"
        echo "   1. Review the changes in all changelogs"
        echo "   2. Run: git add . && git commit -m 'chore: prepare releases for all components'"
        echo "   3. Create tags and push to trigger releases"

  ci:detect-changes:
    desc: Show which components have changes since last release
    cmds:
      - task: detect-changes

  # Legacy compatibility task
  ci:prepare-release:
    desc: DEPRECATED - Use component-specific tasks instead
    summary: "Use task ci:prepare-release:core VERSION=1.2.3 instead"
    cmds:
      - |
        echo "DEPRECATED: Use 'task ci:prepare-release:core VERSION={{.VERSION}}' instead"
      - task: ci:prepare-release:core
        vars: { VERSION: "{{.VERSION}}" }