name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to release (core, sarama, confluentic, segmentio)'
        required: true
        type: choice
        options: [core, sarama, confluentic, segmentio]
      version:
        description: 'The semantic version for the new release (e.g., 1.2.3)'
        required: true
      draft:
        description: 'Create a draft release'
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: ~> v2
          install-only: true

      - name: Prepare Release
        run: |
          echo "Preparing release for ${{ inputs.component }} v${{ inputs.version }}"
          task ci:release:prepare COMPONENT=${{ inputs.component }} VERSION=${{ inputs.version }}

      - name: Commit and Push Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # commit changelog update
          CHANGELOG_PATH=$([ "${{ inputs.component }}" = "core" ] && echo "CHANGELOG.md" || echo "adapter/${{ inputs.component }}/CHANGELOG.md")
          git add "$CHANGELOG_PATH"
          git commit -m "docs(${{ inputs.component }}): update changelog for v${{ inputs.version }}"
          git push

      - name: Create and Push Git Tag
        run: |
          task ci:release:tag COMPONENT=${{ inputs.component }} VERSION=${{ inputs.version }}

      - name: Build and Release
        run: |
          task ci:release:build COMPONENT=${{ inputs.component }} VERSION=${{ inputs.version }} DRAFT=${{ inputs.draft }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup Tag on Failure
        if: failure()
        run: |
          echo "‚ùå Release failed, cleaning up remote tag..."
          TAG_PREFIX=$([ "${{ inputs.component }}" = "core" ] && echo "" || echo "${{ inputs.component }}/")
          TAG="${TAG_PREFIX}v${{ inputs.version }}"
          git push --delete origin "$TAG" || true