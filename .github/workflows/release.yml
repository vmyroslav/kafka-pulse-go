name: Release

on:
  push:
    tags:
      - "v*"                # Core library releases: v1.2.3
      - "sarama/v*"         # Sarama adapter releases: sarama/v1.0.0
      - "confluentic/v*"    # Confluent adapter releases: confluentic/v1.0.0
      - "segmentio/v*"      # SegmentIO adapter releases: segmentio/v1.0.0
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag to release (e.g., v1.2.3, sarama/v1.0.0)'
        required: true
        type: string
      draft:
        description: 'Create draft release (review before publishing)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Determine config path
        id: config
        run: |
          # get tag from either push event or manual input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="${{ inputs.tag }}"
          else
            TAG_NAME=${GITHUB_REF#refs/tags/}
          fi
          
          echo "Processing tag: $TAG_NAME"
          
          if [[ $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "config=.goreleaser.yaml" >> $GITHUB_OUTPUT
            echo "workdir=." >> $GITHUB_OUTPUT
          elif [[ $TAG_NAME =~ ^sarama/v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "config=.goreleaser.yaml" >> $GITHUB_OUTPUT
            echo "workdir=adapter/sarama" >> $GITHUB_OUTPUT
          elif [[ $TAG_NAME =~ ^confluentic/v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "config=.goreleaser.yaml" >> $GITHUB_OUTPUT
            echo "workdir=adapter/confluentic" >> $GITHUB_OUTPUT
          elif [[ $TAG_NAME =~ ^segmentio/v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "config=.goreleaser.yaml" >> $GITHUB_OUTPUT
            echo "workdir=adapter/segmentio" >> $GITHUB_OUTPUT
          else
            echo "Unknown tag format: $TAG_NAME" && exit 1
          fi

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean --config ${{ steps.config.outputs.config }}${{ inputs.draft == 'true' && ' --draft' || '' }}
          workdir: ${{ steps.config.outputs.workdir }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}